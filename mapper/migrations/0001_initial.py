# Generated by Django 5.2 on 2025-04-14 18:05

import cloudinary.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('county', models.CharField(max_length=100)),
                ('polygon', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                'verbose_name_plural': 'Counties',
            },
        ),
        migrations.CreateModel(
            name='LocalAuthority',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_authority', models.CharField(max_length=100)),
                ('polygon', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                'verbose_name_plural': 'LocalAuthorities',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uses_mobility_device', models.BooleanField(default=False, verbose_name='Uses a wheeled mobility device')),
                ('mobility_device_type', models.CharField(blank=True, choices=[('manual_wheelchair', 'Manual Wheelchair'), ('powered_wheelchair', 'Powered Wheelchair'), ('mobility_scooter', 'Mobility Scooter'), ('tricycle', 'Tricycle'), ('adapted_bicycle', 'Adapted Bicycle'), ('bicycle', 'Bicycle'), ('other', 'Other')], max_length=50, null=True, verbose_name='Mobility Device Type')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('place_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('classification', models.CharField(choices=[('green', 'Green'), ('orange', 'Orange'), ('red', 'Red'), ('blue', 'Blue')], max_length=6)),
                ('reasons', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('steep_gradient', 'Steep gradient'), ('lip_too_high', 'Lip too high'), ('cobbles', 'Cobblestones'), ('obstacle', 'Obstacle'), ('no_visual_marking', 'No visual marking'), ('no_tactile_paving', 'No tactile paving'), ('narrow_pavement', 'Narrow pavement'), ('uneven_road_surface', 'Uneven road surface'), ('uneven_pavement_surface', 'Uneven pavement surface'), ('tight_turning_circle', 'Tight turning circle'), ('incorrectly_angled', 'Incorrectly angled'), ('broken_road_surface', 'Broken road surface'), ('broken_pavement_surface', 'Broken pavement surface'), ('accessibility_barrier', 'Accessibility barrier')], max_length=246, null=True)),
                ('comments', models.CharField(blank=True, max_length=1000)),
                ('photo', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='image')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(blank=True, max_length=150, null=True)),
                ('county', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mapper.county')),
                ('local_authority', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='mapper.localauthority')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dropped Kerb Report',
                'verbose_name_plural': 'Dropped Kerb Reports',
                'ordering': ['-created_at'],
                'get_latest_by': 'created_at',
                'indexes': [models.Index(fields=['classification'], name='mapper_repo_classif_843e11_idx'), models.Index(fields=['user'], name='mapper_repo_user_id_dff4be_idx')],
            },
        ),
    ]
